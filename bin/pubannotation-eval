#!/usr/bin/env ruby
require 'pubannotation_evaluator'
require 'json'

rdir = nil
verbose = false

soft_match_characters = PubannotationEvaluator::SOFT_MATCH_CHARACTERS
soft_match_words = PubannotationEvaluator::SOFT_MATCH_WORDS
denotation_type_match = PubannotationEvaluator::EXACT_TYPE_MATCH
relation_type_match = PubannotationEvaluator::EXACT_TYPE_MATCH

## command line option processing
require 'optparse'
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: pubannotation-eval.rb [options] annotation_file(s)"

  opts.on('-r', '--rdir=DIR', 'specifies the path to the directory of reference annotation_file(s).') do |dir|
    rdir = dir
  end

  opts.on('-c', '--soft-match-characters=INT', "specifies the number of characters to allow for boundary mismatch (default=#{PubannotationEvaluator::SOFT_MATCH_CHARACTERS}).") do |i|
    soft_match_characters = i.to_i
  end

  opts.on('-w', '--soft-match-words=INT', "specifies the number of words to allow for boundary mismatch (default=#{PubannotationEvaluator::SOFT_MATCH_WORDS}).") do |i|
    soft_match_words = i.to_i
  end

  opts.on('-D', '--denotation-type-match=TEXT', "specifies a ruby block to determine type match of two denotations (defalut='#{PubannotationEvaluator::EXACT_TYPE_MATCH}').") do |b|
    denotation_type_match = b
  end

  opts.on('-R', '--relation-type-match=TEXT', "specifies a ruby block to determine type match of two denotations (defalut='#{PubannotationEvaluator::EXACT_TYPE_MATCH}').") do |b|
    relation_type_match = b
  end

  opts.on('-v', '--verbose', "tells it to report false positives and false negatives.") do
    verbose = true
  end

  opts.on('-h', '--help', 'displays this screen.') do
    puts opts
    exit
  end
end

optparse.parse!

if ARGV.length == 0 || rdir.nil?
	puts optparse.help
	exit
end

evaluator = PubannotationEvaluator.new(soft_match_characters, soft_match_words, denotation_type_match, relation_type_match)

comparison = ARGV.inject([]) do |col, filepath|
	if File.extname(filepath) == '.json'
		begin
			study_annotations = JSON.parse File.read(filepath), :symbolize_names => true
		rescue
			raise IOError, "Invalid JSON file: #{filepath}"
		end

		filename = File.basename(filepath)
		ref_filepath = File.expand_path(filename, rdir)
		raise IOError, "cannot find the reference file: #{ref_filepath}" unless File.exist?(ref_filepath)
		begin
			reference_annotations = JSON.parse File.read(ref_filepath), :symbolize_names => true
		rescue
			raise IOError, "Invalid JSON file: #{filepath}"
		end

		col += evaluator.compare(study_annotations, reference_annotations)
	end
	col
end

evaluation = evaluator.evaluate(comparison)

if verbose
	false_positives = comparison.select{|m| m[:study] && m[:reference].nil?}
	evaluation[:false_positives] = false_positives unless false_positives.empty?

	false_negatives = comparison.select{|m| m[:study].nil? && m[:reference]}
	evaluation[:false_negatives] = false_negatives unless false_negatives.empty?
end

puts JSON.generate(evaluation)